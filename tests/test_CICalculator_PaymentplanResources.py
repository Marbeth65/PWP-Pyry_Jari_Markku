import pytest
import tempfile
import os
import random
import json

from CICalculator import create_app, db
from CICalculator.models import  Handle, Paymentplan, Model
from sqlalchemy.exc import IntegrityError

@pytest.fixture
def client():
    print("")
    print("Aloitus")
    
    db_fd, db_fname = tempfile.mkstemp()
    config = {
    "SQLALCHEMY_DATABASE_URI": "sqlite:///" + db_fname,
    "TESTING": True
    }
    
    app = create_app(config)
    
    app.app_context().push()
    db.create_all()
    
    _populate_db()
    
    yield app.test_client()
    
    db.session.remove()
    os.close(db_fd)
    os.unlink(db_fname)
    print("Lopetus")
    
def _get_model():
    return {"model": "compact", "manufacturer": "BMW", "year": 2000}
    
def _get_plan():
    return {"provider": "Jorma", "months": 3, "payers": 1, "price": 1200.0}

    
def _populate_db():
    item = Handle(
    handle="dummyhandle",
    name="dummyname",
    type="dummytype"
    )
    db.session.add(item)
    db.session.commit()
    
    handle = Handle.query.first()
    
    for x in range(15):
        item = Paymentplan(
        price = 1000.0,
        provider = "dummyprovider-{}".format(x),
        interestrate = 0.0,
        months = 1,
        payers = 1
        )
        if x == 3 or x == 9 or x == 12:
            item.open = False
        db.session.add(item)
        handle.paymentplans.append(item)        
        
    db.session.commit()
    
    item = Model(
    manufacturer = "Toyota",
    model = "Corolla",
    year = 2007
    )
    handle.models.append(item)
    db.session.add(item)
    db.session.commit()
    
    item = Model(
    manufacturer = "Volkswagen",
    model = "Jetta",
    year = 2009
    )
    handle.models.append(item)
    db.session.add(item)
    db.session.commit()
    
    for x in range(1, 6):
        model = Model.query.first()
        plan = Paymentplan.query.get(x)
        model.paymentplans.append(plan)
        db.session.commit()
             
    for x in range(6, 11):
        model = Model.query.get(2)
        plan = Paymentplan.query.get(x)
        model.paymentplans.append(plan)
        db.session.commit()

class TestPaymentplanCollection(object):
    
    RESOURCE_URL = "/api/dummyhandle/plans"
    WRONG_RESOURCE_URL = "/api/dummierhandle/plans"
    
    def test_get(self, client):
    
        ''' Tests that get request fetches all items and that invalid handle results to 404 error '''
        
        resp = client.get(self.RESOURCE_URL)
        assert resp.status_code == 200 # Tests that status codes work
        
        body = json.loads(resp.data)
        assert len(body["items"]) == 15          # Tests that it takes all 15 paymentplans generated by populate_db
        
        resp = client.get(self.WRONG_RESOURCE_URL)
        assert resp.status_code == 404
        
    def test_post(self, client):
        ''' Tests post method, its optional values and various error codes '''
        
        valid = _get_plan()
        resp = client.post(self.RESOURCE_URL, json=valid)   # Tests that posting works
        assert resp.status_code == 201
        
        resp = client.get(self.RESOURCE_URL)
        body = json.loads(resp.data)
        assert len(body["items"]) == 16                              # Tests that new item is added
        
        plan = Paymentplan.query.get(16)                    # Tests that new item has submitted values
        assert plan.provider == "Jorma"
        
        valid = _get_plan()                                 # Tests that optional values work
        valid["interestrate"] = 1.2
        valid["provider"] = "Peetu"                         # Chanhed name to avoid integrity issues
        resp = client.post(self.RESOURCE_URL, json=valid)
        assert resp.status_code == 201  
        plan = Paymentplan.query.get(17)
        assert plan.interestrate == 1.2
        
        invalid = _get_plan()
        invalid.pop("provider")
        resp = client.post(self.RESOURCE_URL, json=invalid) # Tests that missing fields cause bad request
        assert resp.status_code == 400
        
        valid = _get_plan()
        resp = client.post(self.RESOURCE_URL, json=valid)   # Tests that duplicate paymentplans cause 409 error
        assert resp.status_code == 409
        
        db.session.rollback()                               # IT'S WORKING!
        
        resp = client.post(self.RESOURCE_URL)
        assert resp.status_code == 415
        
        resp = client.post(self.WRONG_RESOURCE_URL)
        assert resp.status_code == 404
        
        
    def test_delete(self, client):
        ''' Tests delete and its error codes '''
        
        resp = client.delete(self.RESOURCE_URL)
        assert resp.status_code == 204                      # Testing reponse
        
        resp = client.get(self.RESOURCE_URL)
        assert resp.status_code == 404                      # Tests that resource vanishes
        
        resp = client.delete(self.WRONG_RESOURCE_URL)
        assert resp.status_code == 404
        
        
    def test_put(self, client):
        valid = {"type": "petteri", "name": "jorma"}
        resp = client.put(self.RESOURCE_URL, json=valid)
        assert resp.status_code == 200
        
        handle = Handle.query.first()                       # Assures that handle changes. THIS EDITS HANDLE!
        assert handle.type == "petteri"
        
        invalid = {"lol": "kek"}
        resp = client.put(self.RESOURCE_URL, json=invalid)
        assert resp.status_code == 400                      # Testing missing fields
        
class TestOpenPaymentplanCollection(object):
    
    RESOURCE_URL = "/api/dummyhandle/plans/open"
    
    def test_get(self, client):
        '''
        Tests that open paymentplan collection has all the items and that all items are open.
        
        Also tests 404 error
        
        '''
        
        resp = client.get(self.RESOURCE_URL)
        assert resp.status_code == 200
        
        body = json.loads(resp.data)
        assert len(body["items"]) == 12                              # Three of the generated paymentplans have open set to false so correct len is 12
        for x in body["items"]:
            assert x["open"] == True                        # Asserts that all paymentplans are open
            
        resp = client.get("/api/kotka/plans/open")
        assert resp.status_code == 404
        
class TestPaymentplanItem(object):
    
    RESOURCE_URL = "/api/dummyhandle/plans/dummyprovider-0/1000.0/1"
    WRONG_RESOURCE_URL = "/api/dummyhandle/plans/dummyprovider-0/1000.0/2"
    
    def test_get(self, client):
        ''' Tests that get works and wrong resource url results to 404 error '''
        
        resp = client.get(self.RESOURCE_URL)
        assert resp.status_code == 200
        
        # Tests 404 error
        resp = client.get(self.WRONG_RESOURCE_URL)
        assert resp.status_code == 404
        
    def test_put(self, client):

        ''' Asserts that you can modify paymentplans with put-request. Tests errors 400, 404 and 415. Next test is also part of this but I had to split these into two parts because database
        no longer works since editing modifies RESOURCE_URL
        '''
        
        valid = {"new_provider":"Risto", "new_price": 2400.0, "new_payers": 13, "new_months": 3, "new_open": False}
        resp = client.put(self.RESOURCE_URL, json=valid)
        assert resp.status_code == 204
        
        resp = client.get("/api/dummyhandle/plans/Risto/2400.0/3")
        assert resp.status_code == 200
        body = json.loads(resp.data)
        assert body["payers"] == 13
        
    def test_put_2(self, client):
        ''' continued put testing on fresh database '''
        
        invalid = {"lol": "krakovanmakkara"}
        resp = client.put(self.RESOURCE_URL, json=invalid)
        assert resp.status_code == 400
        
        invalid = {"new_provider":"Risto", "new_price": 2400.0, "new_payers": 13, "new_months": "sinappi", "new_open": False}
        resp = client.put(self.RESOURCE_URL, json=invalid)
        assert resp.status_code == 400
        
        
    def test_delete(self, client):
        ''' Tests that status codes match and resource URL vanishes after delete '''
        resp = client.delete(self.RESOURCE_URL)
        assert resp.status_code == 204          # Tests reposnse status
        
        resp = client.get(self.RESOURCE_URL)
        assert resp.status_code == 404          # Assures that resource vanishes as a result of delete
        
        resp = client.delete(self.RESOURCE_URL)
        assert resp.status_code == 404
        
        
        
        
        
        
        
        
        
        
        
        
